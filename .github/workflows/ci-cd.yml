name: CI/CD Pipeline

on:
   push:
      branches: [main, develop]
   pull_request:
      branches: [main, develop]

jobs:
   lint:
      name: Lint
      runs-on: ubuntu-latest
      steps:
         - uses: actions/checkout@v4

         - name: Set up Node.js
           uses: actions/setup-node@v4
           with:
              node-version: '22'
              cache: 'npm'

         - name: Install dependencies
           run: npm ci --legacy-peer-deps

         - name: Run linting
           run: npm run lint

   build:
      name: Build
      runs-on: ubuntu-latest
      needs: lint
      steps:
         - uses: actions/checkout@v4

         - name: Set up Node.js
           uses: actions/setup-node@v4
           with:
              node-version: '22'
              cache: 'npm'

         - name: Install dependencies
           run: npm ci --legacy-peer-deps

         - name: Set correct DATABASE_URL based on branch
           run: |
              if [ "${{ github.ref_name }}" = "main" ]; then
                echo "DATABASE_URL=${{ secrets.DATABASE_URL_PROD }}" >> $GITHUB_ENV
              else
                echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
              fi

         - name: Build application
           run: npm run build
           env:
              NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
              DATABASE_URL: ${{ secrets.DATABASE_URL }}

   docker-build:
      name: Build Docker Image
      runs-on: ubuntu-latest
      needs: build
      steps:
         - uses: actions/checkout@v4

         - name: Log into DockerHub
           uses: docker/login-action@v1
           with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}

         - name: Build Docker image
           run: |
              if [ "${{ github.ref_name }}" = "develop" ]; then
                docker compose -f docker-compose.dev.yml up -d --build
              else
                docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }} .
              fi

         - name: Push Docker image to DockerHub
           if: github.ref == 'refs/heads/main'
           run: |
              docker push ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}

   migrate:
      name: Database Migration
      runs-on: ubuntu-latest
      needs: build
      if: github.ref == 'refs/heads/develop'
      steps:
         - uses: actions/checkout@v4
           with:
              fetch-depth: 0

         - name: Set up Node.js
           uses: actions/setup-node@v4
           with:
              node-version: '22'
              cache: 'npm'

         - name: Install dependencies
           run: npm ci --legacy-peer-deps

         - name: Check for new migrations
           id: migrations
           run: |
              if git diff --quiet origin/develop HEAD -- prisma/migrations/; then
                echo "no new migrations"
                echo "run_migrate=false" >> $GITHUB_OUTPUT
              else
                echo "new migrations detected"
                echo "run_migrate=true" >> $GITHUB_OUTPUT
              fi

         - name: Run migrations
           if: steps.migrations.outputs.run_migrate == 'true'
           run: npx prisma migrate deploy
           env:
              DATABASE_URL: ${{ secrets.DATABASE_URL }}

   deploy-develop:
      name: Deploy (Develop)
      runs-on: ubuntu-latest
      needs: build
      if: github.ref == 'refs/heads/develop'
      steps:
         - uses: actions/checkout@v4

         - name: Deploy to Vercel (Preview)
           uses: amondnet/vercel-action@v20.0.1
           with:
              zeit-token: ${{ secrets.VERCELTOKEN }}
              vercel-token: ${{ secrets.VERCELTOKEN }}
              vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
              vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
              vercel-args: '--prod=false'

   deploy-main:
      name: Deploy (Main)
      runs-on: ubuntu-latest
      needs: [build, migrate]
      if: github.ref == 'refs/heads/main'
      steps:
         - uses: actions/checkout@v4

         - name: Deploy to Vercel (Production)
           uses: amondnet/vercel-action@v20.0.1
           with:
              zeit-token: ${{ secrets.VERCELTOKEN }}
              vercel-token: ${{ secrets.VERCELTOKEN }}
              vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
              vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
              vercel-args: '--prod'
